# Makefile.in generated by automake 1.11 from Makefile.am.
# tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



pkgdatadir = $(datadir)/mpc
pkgincludedir = $(includedir)/mpc
pkglibdir = $(libdir)/mpc
pkglibexecdir = $(libexecdir)/mpc
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
check_PROGRAMS = tabs$(EXEEXT) tacos$(EXEEXT) tacosh$(EXEEXT) \
	tadd$(EXEEXT) tadd_fr$(EXEEXT) tadd_ui$(EXEEXT) targ$(EXEEXT) \
	tasin$(EXEEXT) tasinh$(EXEEXT) tatan$(EXEEXT) tatanh$(EXEEXT) \
	tconj$(EXEEXT) tcos$(EXEEXT) tcosh$(EXEEXT) tdiv$(EXEEXT) \
	tdiv_2exp$(EXEEXT) tdiv_fr$(EXEEXT) tdiv_ui$(EXEEXT) \
	texp$(EXEEXT) tfr_div$(EXEEXT) tfr_sub$(EXEEXT) timag$(EXEEXT) \
	tio_str$(EXEEXT) tlog$(EXEEXT) tmul$(EXEEXT) \
	tmul_2exp$(EXEEXT) tmul_fr$(EXEEXT) tmul_i$(EXEEXT) \
	tmul_si$(EXEEXT) tmul_ui$(EXEEXT) tneg$(EXEEXT) tnorm$(EXEEXT) \
	tpow$(EXEEXT) tpow_ld$(EXEEXT) tpow_d$(EXEEXT) \
	tpow_fr$(EXEEXT) tpow_si$(EXEEXT) tpow_ui$(EXEEXT) \
	tpow_z$(EXEEXT) tprec$(EXEEXT) tproj$(EXEEXT) treal$(EXEEXT) \
	treimref$(EXEEXT) tset$(EXEEXT) tsin$(EXEEXT) tsinh$(EXEEXT) \
	tsqr$(EXEEXT) tsqrt$(EXEEXT) tstrtoc$(EXEEXT) tsub$(EXEEXT) \
	tsub_fr$(EXEEXT) tsub_ui$(EXEEXT) ttan$(EXEEXT) ttanh$(EXEEXT) \
	tui_div$(EXEEXT) tui_ui_sub$(EXEEXT) tget_version$(EXEEXT)
subdir = tests
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
libmpc_tests_la_LIBADD =
am_libmpc_tests_la_OBJECTS = random.lo tgeneric.lo read_data.lo \
	comparisons.lo memory.lo
libmpc_tests_la_OBJECTS = $(am_libmpc_tests_la_OBJECTS)
tabs_SOURCES = tabs.c
tabs_OBJECTS = tabs.$(OBJEXT)
tabs_LDADD = $(LDADD)
tabs_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tacos_SOURCES = tacos.c
tacos_OBJECTS = tacos.$(OBJEXT)
tacos_LDADD = $(LDADD)
tacos_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tacosh_SOURCES = tacosh.c
tacosh_OBJECTS = tacosh.$(OBJEXT)
tacosh_LDADD = $(LDADD)
tacosh_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tadd_SOURCES = tadd.c
tadd_OBJECTS = tadd.$(OBJEXT)
tadd_LDADD = $(LDADD)
tadd_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tadd_fr_SOURCES = tadd_fr.c
tadd_fr_OBJECTS = tadd_fr.$(OBJEXT)
tadd_fr_LDADD = $(LDADD)
tadd_fr_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tadd_ui_SOURCES = tadd_ui.c
tadd_ui_OBJECTS = tadd_ui.$(OBJEXT)
tadd_ui_LDADD = $(LDADD)
tadd_ui_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
targ_SOURCES = targ.c
targ_OBJECTS = targ.$(OBJEXT)
targ_LDADD = $(LDADD)
targ_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tasin_SOURCES = tasin.c
tasin_OBJECTS = tasin.$(OBJEXT)
tasin_LDADD = $(LDADD)
tasin_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tasinh_SOURCES = tasinh.c
tasinh_OBJECTS = tasinh.$(OBJEXT)
tasinh_LDADD = $(LDADD)
tasinh_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tatan_SOURCES = tatan.c
tatan_OBJECTS = tatan.$(OBJEXT)
tatan_LDADD = $(LDADD)
tatan_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tatanh_SOURCES = tatanh.c
tatanh_OBJECTS = tatanh.$(OBJEXT)
tatanh_LDADD = $(LDADD)
tatanh_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tconj_SOURCES = tconj.c
tconj_OBJECTS = tconj.$(OBJEXT)
tconj_LDADD = $(LDADD)
tconj_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tcos_SOURCES = tcos.c
tcos_OBJECTS = tcos.$(OBJEXT)
tcos_LDADD = $(LDADD)
tcos_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tcosh_SOURCES = tcosh.c
tcosh_OBJECTS = tcosh.$(OBJEXT)
tcosh_LDADD = $(LDADD)
tcosh_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tdiv_SOURCES = tdiv.c
tdiv_OBJECTS = tdiv.$(OBJEXT)
tdiv_LDADD = $(LDADD)
tdiv_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tdiv_2exp_SOURCES = tdiv_2exp.c
tdiv_2exp_OBJECTS = tdiv_2exp.$(OBJEXT)
tdiv_2exp_LDADD = $(LDADD)
tdiv_2exp_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tdiv_fr_SOURCES = tdiv_fr.c
tdiv_fr_OBJECTS = tdiv_fr.$(OBJEXT)
tdiv_fr_LDADD = $(LDADD)
tdiv_fr_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tdiv_ui_SOURCES = tdiv_ui.c
tdiv_ui_OBJECTS = tdiv_ui.$(OBJEXT)
tdiv_ui_LDADD = $(LDADD)
tdiv_ui_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
texp_SOURCES = texp.c
texp_OBJECTS = texp.$(OBJEXT)
texp_LDADD = $(LDADD)
texp_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tfr_div_SOURCES = tfr_div.c
tfr_div_OBJECTS = tfr_div.$(OBJEXT)
tfr_div_LDADD = $(LDADD)
tfr_div_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tfr_sub_SOURCES = tfr_sub.c
tfr_sub_OBJECTS = tfr_sub.$(OBJEXT)
tfr_sub_LDADD = $(LDADD)
tfr_sub_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tget_version_SOURCES = tget_version.c
tget_version_OBJECTS = tget_version.$(OBJEXT)
tget_version_LDADD = $(LDADD)
tget_version_DEPENDENCIES = libmpc-tests.la \
	$(top_builddir)/src/libmpc.la
timag_SOURCES = timag.c
timag_OBJECTS = timag.$(OBJEXT)
timag_LDADD = $(LDADD)
timag_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tio_str_SOURCES = tio_str.c
tio_str_OBJECTS = tio_str.$(OBJEXT)
tio_str_LDADD = $(LDADD)
tio_str_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tlog_SOURCES = tlog.c
tlog_OBJECTS = tlog.$(OBJEXT)
tlog_LDADD = $(LDADD)
tlog_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tmul_SOURCES = tmul.c
tmul_OBJECTS = tmul.$(OBJEXT)
tmul_LDADD = $(LDADD)
tmul_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tmul_2exp_SOURCES = tmul_2exp.c
tmul_2exp_OBJECTS = tmul_2exp.$(OBJEXT)
tmul_2exp_LDADD = $(LDADD)
tmul_2exp_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tmul_fr_SOURCES = tmul_fr.c
tmul_fr_OBJECTS = tmul_fr.$(OBJEXT)
tmul_fr_LDADD = $(LDADD)
tmul_fr_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tmul_i_SOURCES = tmul_i.c
tmul_i_OBJECTS = tmul_i.$(OBJEXT)
tmul_i_LDADD = $(LDADD)
tmul_i_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tmul_si_SOURCES = tmul_si.c
tmul_si_OBJECTS = tmul_si.$(OBJEXT)
tmul_si_LDADD = $(LDADD)
tmul_si_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tmul_ui_SOURCES = tmul_ui.c
tmul_ui_OBJECTS = tmul_ui.$(OBJEXT)
tmul_ui_LDADD = $(LDADD)
tmul_ui_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tneg_SOURCES = tneg.c
tneg_OBJECTS = tneg.$(OBJEXT)
tneg_LDADD = $(LDADD)
tneg_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tnorm_SOURCES = tnorm.c
tnorm_OBJECTS = tnorm.$(OBJEXT)
tnorm_LDADD = $(LDADD)
tnorm_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tpow_SOURCES = tpow.c
tpow_OBJECTS = tpow.$(OBJEXT)
tpow_LDADD = $(LDADD)
tpow_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tpow_d_SOURCES = tpow_d.c
tpow_d_OBJECTS = tpow_d.$(OBJEXT)
tpow_d_LDADD = $(LDADD)
tpow_d_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tpow_fr_SOURCES = tpow_fr.c
tpow_fr_OBJECTS = tpow_fr.$(OBJEXT)
tpow_fr_LDADD = $(LDADD)
tpow_fr_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tpow_ld_SOURCES = tpow_ld.c
tpow_ld_OBJECTS = tpow_ld.$(OBJEXT)
tpow_ld_LDADD = $(LDADD)
tpow_ld_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tpow_si_SOURCES = tpow_si.c
tpow_si_OBJECTS = tpow_si.$(OBJEXT)
tpow_si_LDADD = $(LDADD)
tpow_si_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tpow_ui_SOURCES = tpow_ui.c
tpow_ui_OBJECTS = tpow_ui.$(OBJEXT)
tpow_ui_LDADD = $(LDADD)
tpow_ui_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tpow_z_SOURCES = tpow_z.c
tpow_z_OBJECTS = tpow_z.$(OBJEXT)
tpow_z_LDADD = $(LDADD)
tpow_z_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tprec_SOURCES = tprec.c
tprec_OBJECTS = tprec.$(OBJEXT)
tprec_LDADD = $(LDADD)
tprec_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tproj_SOURCES = tproj.c
tproj_OBJECTS = tproj.$(OBJEXT)
tproj_LDADD = $(LDADD)
tproj_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
treal_SOURCES = treal.c
treal_OBJECTS = treal.$(OBJEXT)
treal_LDADD = $(LDADD)
treal_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
treimref_SOURCES = treimref.c
treimref_OBJECTS = treimref.$(OBJEXT)
treimref_LDADD = $(LDADD)
treimref_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tset_SOURCES = tset.c
tset_OBJECTS = tset.$(OBJEXT)
tset_LDADD = $(LDADD)
tset_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tsin_SOURCES = tsin.c
tsin_OBJECTS = tsin.$(OBJEXT)
tsin_LDADD = $(LDADD)
tsin_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tsinh_SOURCES = tsinh.c
tsinh_OBJECTS = tsinh.$(OBJEXT)
tsinh_LDADD = $(LDADD)
tsinh_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tsqr_SOURCES = tsqr.c
tsqr_OBJECTS = tsqr.$(OBJEXT)
tsqr_LDADD = $(LDADD)
tsqr_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tsqrt_SOURCES = tsqrt.c
tsqrt_OBJECTS = tsqrt.$(OBJEXT)
tsqrt_LDADD = $(LDADD)
tsqrt_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tstrtoc_SOURCES = tstrtoc.c
tstrtoc_OBJECTS = tstrtoc.$(OBJEXT)
tstrtoc_LDADD = $(LDADD)
tstrtoc_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tsub_SOURCES = tsub.c
tsub_OBJECTS = tsub.$(OBJEXT)
tsub_LDADD = $(LDADD)
tsub_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tsub_fr_SOURCES = tsub_fr.c
tsub_fr_OBJECTS = tsub_fr.$(OBJEXT)
tsub_fr_LDADD = $(LDADD)
tsub_fr_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tsub_ui_SOURCES = tsub_ui.c
tsub_ui_OBJECTS = tsub_ui.$(OBJEXT)
tsub_ui_LDADD = $(LDADD)
tsub_ui_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
ttan_SOURCES = ttan.c
ttan_OBJECTS = ttan.$(OBJEXT)
ttan_LDADD = $(LDADD)
ttan_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
ttanh_SOURCES = ttanh.c
ttanh_OBJECTS = ttanh.$(OBJEXT)
ttanh_LDADD = $(LDADD)
ttanh_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tui_div_SOURCES = tui_div.c
tui_div_OBJECTS = tui_div.$(OBJEXT)
tui_div_LDADD = $(LDADD)
tui_div_DEPENDENCIES = libmpc-tests.la $(top_builddir)/src/libmpc.la
tui_ui_sub_SOURCES = tui_ui_sub.c
tui_ui_sub_OBJECTS = tui_ui_sub.$(OBJEXT)
tui_ui_sub_LDADD = $(LDADD)
tui_ui_sub_DEPENDENCIES = libmpc-tests.la \
	$(top_builddir)/src/libmpc.la
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libmpc_tests_la_SOURCES) tabs.c tacos.c tacosh.c tadd.c \
	tadd_fr.c tadd_ui.c targ.c tasin.c tasinh.c tatan.c tatanh.c \
	tconj.c tcos.c tcosh.c tdiv.c tdiv_2exp.c tdiv_fr.c tdiv_ui.c \
	texp.c tfr_div.c tfr_sub.c tget_version.c timag.c tio_str.c \
	tlog.c tmul.c tmul_2exp.c tmul_fr.c tmul_i.c tmul_si.c \
	tmul_ui.c tneg.c tnorm.c tpow.c tpow_d.c tpow_fr.c tpow_ld.c \
	tpow_si.c tpow_ui.c tpow_z.c tprec.c tproj.c treal.c \
	treimref.c tset.c tsin.c tsinh.c tsqr.c tsqrt.c tstrtoc.c \
	tsub.c tsub_fr.c tsub_ui.c ttan.c ttanh.c tui_div.c \
	tui_ui_sub.c
DIST_SOURCES = $(libmpc_tests_la_SOURCES) tabs.c tacos.c tacosh.c \
	tadd.c tadd_fr.c tadd_ui.c targ.c tasin.c tasinh.c tatan.c \
	tatanh.c tconj.c tcos.c tcosh.c tdiv.c tdiv_2exp.c tdiv_fr.c \
	tdiv_ui.c texp.c tfr_div.c tfr_sub.c tget_version.c timag.c \
	tio_str.c tlog.c tmul.c tmul_2exp.c tmul_fr.c tmul_i.c \
	tmul_si.c tmul_ui.c tneg.c tnorm.c tpow.c tpow_d.c tpow_fr.c \
	tpow_ld.c tpow_si.c tpow_ui.c tpow_z.c tprec.c tproj.c treal.c \
	treimref.c tset.c tsin.c tsinh.c tsqr.c tsqrt.c tstrtoc.c \
	tsub.c tsub_fr.c tsub_ui.c ttan.c ttanh.c tui_div.c \
	tui_ui_sub.c
ETAGS = etags
CTAGS = ctags
am__tty_colors = \
red=; grn=; lgn=; blu=; std=
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/anselm/src/comp/mpc/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/anselm/src/comp/mpc/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/anselm/src/comp/mpc/missing --run autoconf
AUTOHEADER = ${SHELL} /home/anselm/src/comp/mpc/missing --run autoheader
AUTOMAKE = ${SHELL} /home/anselm/src/comp/mpc/missing --run automake-1.11
AWK = mawk
CC = x86_64-linux-gnu-gcc -std=gnu99
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -O3
CPP = gcc -E
CPPFLAGS = -I../../gmp -I../../mpfr 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = -L../../gmp -L../../mpfr 
LIBOBJS = 
LIBS = -lmpfr -lgmp 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/anselm/src/comp/mpc/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = mpc
PACKAGE_BUGREPORT = mpc-discuss@lists.gforge.inria.fr
PACKAGE_NAME = mpc
PACKAGE_STRING = mpc 0.8.1
PACKAGE_TARNAME = mpc
PACKAGE_URL = 
PACKAGE_VERSION = 0.8.1
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 0.8.1
WARNINGCFLAGS = 
abs_builddir = /home/anselm/src/comp/mpc/tests
abs_srcdir = /home/anselm/src/comp/mpc/tests
abs_top_builddir = /home/anselm/src/comp/mpc
abs_top_srcdir = /home/anselm/src/comp/mpc
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/anselm/src/comp/mpc/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AM_CFLAGS = 
AM_CPPFLAGS = -I$(top_srcdir)/src
LDADD = libmpc-tests.la $(top_builddir)/src/libmpc.la
LOADLIBES = $(DEFS) -I$(top_srcdir)/src $(CPPFLAGS) $(CFLAGS) $(top_builddir)/src/.libs/libmpc.a $(LIBS)
check_LTLIBRARIES = libmpc-tests.la
libmpc_tests_la_SOURCES = mpc-tests.h random.c tgeneric.c read_data.c           \
comparisons.c memory.c

EXTRA_DIST = abs.dat acos.dat acosh.dat asin.dat asinh.dat atan.dat atanh.dat \
add.dat add_fr.dat arg.dat conj.dat cos.dat cosh.dat                          \
div.dat div_fr.dat exp.dat fr_div.dat fr_sub.dat inp_str.dat log.dat mul.dat  \
mul_fr.dat neg.dat norm.dat pow.dat proj.dat sin.dat sinh.dat sqr.dat         \
sqrt.dat strtoc.dat sub.dat sub_fr.dat tan.dat tanh.dat

TESTS = $(check_PROGRAMS)
CLEANFILES = mpc_test
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkLTLIBRARIES:
	-test -z "$(check_LTLIBRARIES)" || rm -f $(check_LTLIBRARIES)
	@list='$(check_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libmpc-tests.la: $(libmpc_tests_la_OBJECTS) $(libmpc_tests_la_DEPENDENCIES) 
	$(LINK)  $(libmpc_tests_la_OBJECTS) $(libmpc_tests_la_LIBADD) $(LIBS)

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
tabs$(EXEEXT): $(tabs_OBJECTS) $(tabs_DEPENDENCIES) 
	@rm -f tabs$(EXEEXT)
	$(LINK) $(tabs_OBJECTS) $(tabs_LDADD) $(LIBS)
tacos$(EXEEXT): $(tacos_OBJECTS) $(tacos_DEPENDENCIES) 
	@rm -f tacos$(EXEEXT)
	$(LINK) $(tacos_OBJECTS) $(tacos_LDADD) $(LIBS)
tacosh$(EXEEXT): $(tacosh_OBJECTS) $(tacosh_DEPENDENCIES) 
	@rm -f tacosh$(EXEEXT)
	$(LINK) $(tacosh_OBJECTS) $(tacosh_LDADD) $(LIBS)
tadd$(EXEEXT): $(tadd_OBJECTS) $(tadd_DEPENDENCIES) 
	@rm -f tadd$(EXEEXT)
	$(LINK) $(tadd_OBJECTS) $(tadd_LDADD) $(LIBS)
tadd_fr$(EXEEXT): $(tadd_fr_OBJECTS) $(tadd_fr_DEPENDENCIES) 
	@rm -f tadd_fr$(EXEEXT)
	$(LINK) $(tadd_fr_OBJECTS) $(tadd_fr_LDADD) $(LIBS)
tadd_ui$(EXEEXT): $(tadd_ui_OBJECTS) $(tadd_ui_DEPENDENCIES) 
	@rm -f tadd_ui$(EXEEXT)
	$(LINK) $(tadd_ui_OBJECTS) $(tadd_ui_LDADD) $(LIBS)
targ$(EXEEXT): $(targ_OBJECTS) $(targ_DEPENDENCIES) 
	@rm -f targ$(EXEEXT)
	$(LINK) $(targ_OBJECTS) $(targ_LDADD) $(LIBS)
tasin$(EXEEXT): $(tasin_OBJECTS) $(tasin_DEPENDENCIES) 
	@rm -f tasin$(EXEEXT)
	$(LINK) $(tasin_OBJECTS) $(tasin_LDADD) $(LIBS)
tasinh$(EXEEXT): $(tasinh_OBJECTS) $(tasinh_DEPENDENCIES) 
	@rm -f tasinh$(EXEEXT)
	$(LINK) $(tasinh_OBJECTS) $(tasinh_LDADD) $(LIBS)
tatan$(EXEEXT): $(tatan_OBJECTS) $(tatan_DEPENDENCIES) 
	@rm -f tatan$(EXEEXT)
	$(LINK) $(tatan_OBJECTS) $(tatan_LDADD) $(LIBS)
tatanh$(EXEEXT): $(tatanh_OBJECTS) $(tatanh_DEPENDENCIES) 
	@rm -f tatanh$(EXEEXT)
	$(LINK) $(tatanh_OBJECTS) $(tatanh_LDADD) $(LIBS)
tconj$(EXEEXT): $(tconj_OBJECTS) $(tconj_DEPENDENCIES) 
	@rm -f tconj$(EXEEXT)
	$(LINK) $(tconj_OBJECTS) $(tconj_LDADD) $(LIBS)
tcos$(EXEEXT): $(tcos_OBJECTS) $(tcos_DEPENDENCIES) 
	@rm -f tcos$(EXEEXT)
	$(LINK) $(tcos_OBJECTS) $(tcos_LDADD) $(LIBS)
tcosh$(EXEEXT): $(tcosh_OBJECTS) $(tcosh_DEPENDENCIES) 
	@rm -f tcosh$(EXEEXT)
	$(LINK) $(tcosh_OBJECTS) $(tcosh_LDADD) $(LIBS)
tdiv$(EXEEXT): $(tdiv_OBJECTS) $(tdiv_DEPENDENCIES) 
	@rm -f tdiv$(EXEEXT)
	$(LINK) $(tdiv_OBJECTS) $(tdiv_LDADD) $(LIBS)
tdiv_2exp$(EXEEXT): $(tdiv_2exp_OBJECTS) $(tdiv_2exp_DEPENDENCIES) 
	@rm -f tdiv_2exp$(EXEEXT)
	$(LINK) $(tdiv_2exp_OBJECTS) $(tdiv_2exp_LDADD) $(LIBS)
tdiv_fr$(EXEEXT): $(tdiv_fr_OBJECTS) $(tdiv_fr_DEPENDENCIES) 
	@rm -f tdiv_fr$(EXEEXT)
	$(LINK) $(tdiv_fr_OBJECTS) $(tdiv_fr_LDADD) $(LIBS)
tdiv_ui$(EXEEXT): $(tdiv_ui_OBJECTS) $(tdiv_ui_DEPENDENCIES) 
	@rm -f tdiv_ui$(EXEEXT)
	$(LINK) $(tdiv_ui_OBJECTS) $(tdiv_ui_LDADD) $(LIBS)
texp$(EXEEXT): $(texp_OBJECTS) $(texp_DEPENDENCIES) 
	@rm -f texp$(EXEEXT)
	$(LINK) $(texp_OBJECTS) $(texp_LDADD) $(LIBS)
tfr_div$(EXEEXT): $(tfr_div_OBJECTS) $(tfr_div_DEPENDENCIES) 
	@rm -f tfr_div$(EXEEXT)
	$(LINK) $(tfr_div_OBJECTS) $(tfr_div_LDADD) $(LIBS)
tfr_sub$(EXEEXT): $(tfr_sub_OBJECTS) $(tfr_sub_DEPENDENCIES) 
	@rm -f tfr_sub$(EXEEXT)
	$(LINK) $(tfr_sub_OBJECTS) $(tfr_sub_LDADD) $(LIBS)
tget_version$(EXEEXT): $(tget_version_OBJECTS) $(tget_version_DEPENDENCIES) 
	@rm -f tget_version$(EXEEXT)
	$(LINK) $(tget_version_OBJECTS) $(tget_version_LDADD) $(LIBS)
timag$(EXEEXT): $(timag_OBJECTS) $(timag_DEPENDENCIES) 
	@rm -f timag$(EXEEXT)
	$(LINK) $(timag_OBJECTS) $(timag_LDADD) $(LIBS)
tio_str$(EXEEXT): $(tio_str_OBJECTS) $(tio_str_DEPENDENCIES) 
	@rm -f tio_str$(EXEEXT)
	$(LINK) $(tio_str_OBJECTS) $(tio_str_LDADD) $(LIBS)
tlog$(EXEEXT): $(tlog_OBJECTS) $(tlog_DEPENDENCIES) 
	@rm -f tlog$(EXEEXT)
	$(LINK) $(tlog_OBJECTS) $(tlog_LDADD) $(LIBS)
tmul$(EXEEXT): $(tmul_OBJECTS) $(tmul_DEPENDENCIES) 
	@rm -f tmul$(EXEEXT)
	$(LINK) $(tmul_OBJECTS) $(tmul_LDADD) $(LIBS)
tmul_2exp$(EXEEXT): $(tmul_2exp_OBJECTS) $(tmul_2exp_DEPENDENCIES) 
	@rm -f tmul_2exp$(EXEEXT)
	$(LINK) $(tmul_2exp_OBJECTS) $(tmul_2exp_LDADD) $(LIBS)
tmul_fr$(EXEEXT): $(tmul_fr_OBJECTS) $(tmul_fr_DEPENDENCIES) 
	@rm -f tmul_fr$(EXEEXT)
	$(LINK) $(tmul_fr_OBJECTS) $(tmul_fr_LDADD) $(LIBS)
tmul_i$(EXEEXT): $(tmul_i_OBJECTS) $(tmul_i_DEPENDENCIES) 
	@rm -f tmul_i$(EXEEXT)
	$(LINK) $(tmul_i_OBJECTS) $(tmul_i_LDADD) $(LIBS)
tmul_si$(EXEEXT): $(tmul_si_OBJECTS) $(tmul_si_DEPENDENCIES) 
	@rm -f tmul_si$(EXEEXT)
	$(LINK) $(tmul_si_OBJECTS) $(tmul_si_LDADD) $(LIBS)
tmul_ui$(EXEEXT): $(tmul_ui_OBJECTS) $(tmul_ui_DEPENDENCIES) 
	@rm -f tmul_ui$(EXEEXT)
	$(LINK) $(tmul_ui_OBJECTS) $(tmul_ui_LDADD) $(LIBS)
tneg$(EXEEXT): $(tneg_OBJECTS) $(tneg_DEPENDENCIES) 
	@rm -f tneg$(EXEEXT)
	$(LINK) $(tneg_OBJECTS) $(tneg_LDADD) $(LIBS)
tnorm$(EXEEXT): $(tnorm_OBJECTS) $(tnorm_DEPENDENCIES) 
	@rm -f tnorm$(EXEEXT)
	$(LINK) $(tnorm_OBJECTS) $(tnorm_LDADD) $(LIBS)
tpow$(EXEEXT): $(tpow_OBJECTS) $(tpow_DEPENDENCIES) 
	@rm -f tpow$(EXEEXT)
	$(LINK) $(tpow_OBJECTS) $(tpow_LDADD) $(LIBS)
tpow_d$(EXEEXT): $(tpow_d_OBJECTS) $(tpow_d_DEPENDENCIES) 
	@rm -f tpow_d$(EXEEXT)
	$(LINK) $(tpow_d_OBJECTS) $(tpow_d_LDADD) $(LIBS)
tpow_fr$(EXEEXT): $(tpow_fr_OBJECTS) $(tpow_fr_DEPENDENCIES) 
	@rm -f tpow_fr$(EXEEXT)
	$(LINK) $(tpow_fr_OBJECTS) $(tpow_fr_LDADD) $(LIBS)
tpow_ld$(EXEEXT): $(tpow_ld_OBJECTS) $(tpow_ld_DEPENDENCIES) 
	@rm -f tpow_ld$(EXEEXT)
	$(LINK) $(tpow_ld_OBJECTS) $(tpow_ld_LDADD) $(LIBS)
tpow_si$(EXEEXT): $(tpow_si_OBJECTS) $(tpow_si_DEPENDENCIES) 
	@rm -f tpow_si$(EXEEXT)
	$(LINK) $(tpow_si_OBJECTS) $(tpow_si_LDADD) $(LIBS)
tpow_ui$(EXEEXT): $(tpow_ui_OBJECTS) $(tpow_ui_DEPENDENCIES) 
	@rm -f tpow_ui$(EXEEXT)
	$(LINK) $(tpow_ui_OBJECTS) $(tpow_ui_LDADD) $(LIBS)
tpow_z$(EXEEXT): $(tpow_z_OBJECTS) $(tpow_z_DEPENDENCIES) 
	@rm -f tpow_z$(EXEEXT)
	$(LINK) $(tpow_z_OBJECTS) $(tpow_z_LDADD) $(LIBS)
tprec$(EXEEXT): $(tprec_OBJECTS) $(tprec_DEPENDENCIES) 
	@rm -f tprec$(EXEEXT)
	$(LINK) $(tprec_OBJECTS) $(tprec_LDADD) $(LIBS)
tproj$(EXEEXT): $(tproj_OBJECTS) $(tproj_DEPENDENCIES) 
	@rm -f tproj$(EXEEXT)
	$(LINK) $(tproj_OBJECTS) $(tproj_LDADD) $(LIBS)
treal$(EXEEXT): $(treal_OBJECTS) $(treal_DEPENDENCIES) 
	@rm -f treal$(EXEEXT)
	$(LINK) $(treal_OBJECTS) $(treal_LDADD) $(LIBS)
treimref$(EXEEXT): $(treimref_OBJECTS) $(treimref_DEPENDENCIES) 
	@rm -f treimref$(EXEEXT)
	$(LINK) $(treimref_OBJECTS) $(treimref_LDADD) $(LIBS)
tset$(EXEEXT): $(tset_OBJECTS) $(tset_DEPENDENCIES) 
	@rm -f tset$(EXEEXT)
	$(LINK) $(tset_OBJECTS) $(tset_LDADD) $(LIBS)
tsin$(EXEEXT): $(tsin_OBJECTS) $(tsin_DEPENDENCIES) 
	@rm -f tsin$(EXEEXT)
	$(LINK) $(tsin_OBJECTS) $(tsin_LDADD) $(LIBS)
tsinh$(EXEEXT): $(tsinh_OBJECTS) $(tsinh_DEPENDENCIES) 
	@rm -f tsinh$(EXEEXT)
	$(LINK) $(tsinh_OBJECTS) $(tsinh_LDADD) $(LIBS)
tsqr$(EXEEXT): $(tsqr_OBJECTS) $(tsqr_DEPENDENCIES) 
	@rm -f tsqr$(EXEEXT)
	$(LINK) $(tsqr_OBJECTS) $(tsqr_LDADD) $(LIBS)
tsqrt$(EXEEXT): $(tsqrt_OBJECTS) $(tsqrt_DEPENDENCIES) 
	@rm -f tsqrt$(EXEEXT)
	$(LINK) $(tsqrt_OBJECTS) $(tsqrt_LDADD) $(LIBS)
tstrtoc$(EXEEXT): $(tstrtoc_OBJECTS) $(tstrtoc_DEPENDENCIES) 
	@rm -f tstrtoc$(EXEEXT)
	$(LINK) $(tstrtoc_OBJECTS) $(tstrtoc_LDADD) $(LIBS)
tsub$(EXEEXT): $(tsub_OBJECTS) $(tsub_DEPENDENCIES) 
	@rm -f tsub$(EXEEXT)
	$(LINK) $(tsub_OBJECTS) $(tsub_LDADD) $(LIBS)
tsub_fr$(EXEEXT): $(tsub_fr_OBJECTS) $(tsub_fr_DEPENDENCIES) 
	@rm -f tsub_fr$(EXEEXT)
	$(LINK) $(tsub_fr_OBJECTS) $(tsub_fr_LDADD) $(LIBS)
tsub_ui$(EXEEXT): $(tsub_ui_OBJECTS) $(tsub_ui_DEPENDENCIES) 
	@rm -f tsub_ui$(EXEEXT)
	$(LINK) $(tsub_ui_OBJECTS) $(tsub_ui_LDADD) $(LIBS)
ttan$(EXEEXT): $(ttan_OBJECTS) $(ttan_DEPENDENCIES) 
	@rm -f ttan$(EXEEXT)
	$(LINK) $(ttan_OBJECTS) $(ttan_LDADD) $(LIBS)
ttanh$(EXEEXT): $(ttanh_OBJECTS) $(ttanh_DEPENDENCIES) 
	@rm -f ttanh$(EXEEXT)
	$(LINK) $(ttanh_OBJECTS) $(ttanh_LDADD) $(LIBS)
tui_div$(EXEEXT): $(tui_div_OBJECTS) $(tui_div_DEPENDENCIES) 
	@rm -f tui_div$(EXEEXT)
	$(LINK) $(tui_div_OBJECTS) $(tui_div_LDADD) $(LIBS)
tui_ui_sub$(EXEEXT): $(tui_ui_sub_OBJECTS) $(tui_ui_sub_DEPENDENCIES) 
	@rm -f tui_ui_sub$(EXEEXT)
	$(LINK) $(tui_ui_sub_OBJECTS) $(tui_ui_sub_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/comparisons.Plo
include ./$(DEPDIR)/memory.Plo
include ./$(DEPDIR)/random.Plo
include ./$(DEPDIR)/read_data.Plo
include ./$(DEPDIR)/tabs.Po
include ./$(DEPDIR)/tacos.Po
include ./$(DEPDIR)/tacosh.Po
include ./$(DEPDIR)/tadd.Po
include ./$(DEPDIR)/tadd_fr.Po
include ./$(DEPDIR)/tadd_ui.Po
include ./$(DEPDIR)/targ.Po
include ./$(DEPDIR)/tasin.Po
include ./$(DEPDIR)/tasinh.Po
include ./$(DEPDIR)/tatan.Po
include ./$(DEPDIR)/tatanh.Po
include ./$(DEPDIR)/tconj.Po
include ./$(DEPDIR)/tcos.Po
include ./$(DEPDIR)/tcosh.Po
include ./$(DEPDIR)/tdiv.Po
include ./$(DEPDIR)/tdiv_2exp.Po
include ./$(DEPDIR)/tdiv_fr.Po
include ./$(DEPDIR)/tdiv_ui.Po
include ./$(DEPDIR)/texp.Po
include ./$(DEPDIR)/tfr_div.Po
include ./$(DEPDIR)/tfr_sub.Po
include ./$(DEPDIR)/tgeneric.Plo
include ./$(DEPDIR)/tget_version.Po
include ./$(DEPDIR)/timag.Po
include ./$(DEPDIR)/tio_str.Po
include ./$(DEPDIR)/tlog.Po
include ./$(DEPDIR)/tmul.Po
include ./$(DEPDIR)/tmul_2exp.Po
include ./$(DEPDIR)/tmul_fr.Po
include ./$(DEPDIR)/tmul_i.Po
include ./$(DEPDIR)/tmul_si.Po
include ./$(DEPDIR)/tmul_ui.Po
include ./$(DEPDIR)/tneg.Po
include ./$(DEPDIR)/tnorm.Po
include ./$(DEPDIR)/tpow.Po
include ./$(DEPDIR)/tpow_d.Po
include ./$(DEPDIR)/tpow_fr.Po
include ./$(DEPDIR)/tpow_ld.Po
include ./$(DEPDIR)/tpow_si.Po
include ./$(DEPDIR)/tpow_ui.Po
include ./$(DEPDIR)/tpow_z.Po
include ./$(DEPDIR)/tprec.Po
include ./$(DEPDIR)/tproj.Po
include ./$(DEPDIR)/treal.Po
include ./$(DEPDIR)/treimref.Po
include ./$(DEPDIR)/tset.Po
include ./$(DEPDIR)/tsin.Po
include ./$(DEPDIR)/tsinh.Po
include ./$(DEPDIR)/tsqr.Po
include ./$(DEPDIR)/tsqrt.Po
include ./$(DEPDIR)/tstrtoc.Po
include ./$(DEPDIR)/tsub.Po
include ./$(DEPDIR)/tsub_fr.Po
include ./$(DEPDIR)/tsub_ui.Po
include ./$(DEPDIR)/ttan.Po
include ./$(DEPDIR)/ttanh.Po
include ./$(DEPDIR)/tui_div.Po
include ./$(DEPDIR)/tui_ui_sub.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    echo "$$grn$$dashes"; \
	  else \
	    echo "$$red$$dashes"; \
	  fi; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes$$std"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_LTLIBRARIES) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkLTLIBRARIES clean-checkPROGRAMS clean-generic \
	clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkLTLIBRARIES clean-checkPROGRAMS clean-generic \
	clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
